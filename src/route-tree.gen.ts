/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthLayoutRouteImport } from './pages/_auth/layout'
import { Route as AppLayoutRouteImport } from './pages/_app/layout'
import { Route as PublicIndexRouteImport } from './pages/_public/index'
import { Route as PublicTermosRouteImport } from './pages/_public/termos'
import { Route as PublicPrivacidadeRouteImport } from './pages/_public/privacidade'
import { Route as AuthLoginRouteImport } from './pages/_auth/login'
import { Route as AppDashboardLayoutRouteImport } from './pages/_app/dashboard/layout'
import { Route as AppAdminLayoutRouteImport } from './pages/_app/admin/layout'
import { Route as AppDashboardIndexRouteImport } from './pages/_app/dashboard/index'
import { Route as AppAdminIndexRouteImport } from './pages/_app/admin/index'

const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/_public/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicTermosRoute = PublicTermosRouteImport.update({
  id: '/_public/termos',
  path: '/termos',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicPrivacidadeRoute = PublicPrivacidadeRouteImport.update({
  id: '/_public/privacidade',
  path: '/privacidade',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AppDashboardLayoutRoute = AppDashboardLayoutRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppAdminLayoutRoute = AppAdminLayoutRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppDashboardIndexRoute = AppDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppDashboardLayoutRoute,
} as any)
const AppAdminIndexRoute = AppAdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppAdminLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AppAdminLayoutRouteWithChildren
  '/dashboard': typeof AppDashboardLayoutRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/privacidade': typeof PublicPrivacidadeRoute
  '/termos': typeof PublicTermosRoute
  '/': typeof PublicIndexRoute
  '/admin/': typeof AppAdminIndexRoute
  '/dashboard/': typeof AppDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLoginRoute
  '/privacidade': typeof PublicPrivacidadeRoute
  '/termos': typeof PublicTermosRoute
  '/': typeof PublicIndexRoute
  '/admin': typeof AppAdminIndexRoute
  '/dashboard': typeof AppDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppLayoutRouteWithChildren
  '/_auth': typeof AuthLayoutRouteWithChildren
  '/_app/admin': typeof AppAdminLayoutRouteWithChildren
  '/_app/dashboard': typeof AppDashboardLayoutRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_public/privacidade': typeof PublicPrivacidadeRoute
  '/_public/termos': typeof PublicTermosRoute
  '/_public/': typeof PublicIndexRoute
  '/_app/admin/': typeof AppAdminIndexRoute
  '/_app/dashboard/': typeof AppDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/dashboard'
    | '/login'
    | '/privacidade'
    | '/termos'
    | '/'
    | '/admin/'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/privacidade' | '/termos' | '/' | '/admin' | '/dashboard'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_app/admin'
    | '/_app/dashboard'
    | '/_auth/login'
    | '/_public/privacidade'
    | '/_public/termos'
    | '/_public/'
    | '/_app/admin/'
    | '/_app/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
  PublicPrivacidadeRoute: typeof PublicPrivacidadeRoute
  PublicTermosRoute: typeof PublicTermosRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/termos': {
      id: '/_public/termos'
      path: '/termos'
      fullPath: '/termos'
      preLoaderRoute: typeof PublicTermosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/privacidade': {
      id: '/_public/privacidade'
      path: '/privacidade'
      fullPath: '/privacidade'
      preLoaderRoute: typeof PublicPrivacidadeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardLayoutRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/admin': {
      id: '/_app/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AppAdminLayoutRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/dashboard/': {
      id: '/_app/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof AppDashboardIndexRouteImport
      parentRoute: typeof AppDashboardLayoutRoute
    }
    '/_app/admin/': {
      id: '/_app/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AppAdminIndexRouteImport
      parentRoute: typeof AppAdminLayoutRoute
    }
  }
}

interface AppAdminLayoutRouteChildren {
  AppAdminIndexRoute: typeof AppAdminIndexRoute
}

const AppAdminLayoutRouteChildren: AppAdminLayoutRouteChildren = {
  AppAdminIndexRoute: AppAdminIndexRoute,
}

const AppAdminLayoutRouteWithChildren = AppAdminLayoutRoute._addFileChildren(
  AppAdminLayoutRouteChildren,
)

interface AppDashboardLayoutRouteChildren {
  AppDashboardIndexRoute: typeof AppDashboardIndexRoute
}

const AppDashboardLayoutRouteChildren: AppDashboardLayoutRouteChildren = {
  AppDashboardIndexRoute: AppDashboardIndexRoute,
}

const AppDashboardLayoutRouteWithChildren =
  AppDashboardLayoutRoute._addFileChildren(AppDashboardLayoutRouteChildren)

interface AppLayoutRouteChildren {
  AppAdminLayoutRoute: typeof AppAdminLayoutRouteWithChildren
  AppDashboardLayoutRoute: typeof AppDashboardLayoutRouteWithChildren
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppAdminLayoutRoute: AppAdminLayoutRouteWithChildren,
  AppDashboardLayoutRoute: AppDashboardLayoutRouteWithChildren,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
  PublicPrivacidadeRoute: PublicPrivacidadeRoute,
  PublicTermosRoute: PublicTermosRoute,
  PublicIndexRoute: PublicIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
