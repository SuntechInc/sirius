# .github/workflows/deploy.yaml
name: Deploy Sirius

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: lucassuntech/sirius

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Determine Docker tag (short SHA)
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" \
            | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Docker images
        run: |
          IMAGE="${IMAGE_NAME}:${TAG}"
          docker build -t $IMAGE .
          docker tag $IMAGE $IMAGE_NAME:latest
          docker push "$IMAGE"
          docker push "$IMAGE_NAME:latest"

  deploy-to-k8s:
    name: Deploy to Kubernetes (Production)
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: SSH & rollout restart
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ci-deploy
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            export KUBECONFIG=/home/ci-deploy/.kube/config

            # namespace e deployment hardcoded para evitar expansão vazia
            NAMESPACE=frontend-prod
            DEPLOYMENT=frontend-prod

            echo "Restarting $DEPLOYMENT in namespace $NAMESPACE to pull :latest…"

            # reinicia o rollout, puxando sempre a imagem :latest
            kubectl rollout restart deployment/${DEPLOYMENT} -n ${NAMESPACE}

            # aguarda a nova versão entrar em Ready
            kubectl rollout status deployment/${DEPLOYMENT} \
              -n ${NAMESPACE} \
              --timeout=120s
